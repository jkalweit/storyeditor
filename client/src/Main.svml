{
import { parse, ProgNode, ChapterNode, PromptNode, PromptOptionNode, NextNode } from './parser';
import * as smoothscroll from './lib/smoothscroll'

smoothscroll.polyfill();

export interface MainData extends SyncData {
    stories: {[key: string]: Story};
}

export interface Story extends SyncData {
    title: string;
    text: string;
}
export interface StoryNode extends SyncData {
    number: number;
    text: string;
}
export interface StoryNodeOption extends SyncData {
    number: number;
    text: string;
}
}


MainView<MainData>
    @{ 
        selectedStory: Story;
        something: string;
    }
    .style { 
        position: absolute;
        left: 0; top: 0; right: 0; bottom: 0;
    }
    #storyList:StoryList $data.stories
        onSelected(story: Story) {
            (this as any).selectedStory = story;
            this.editor.update(story);
        }
    #editor:StoryEditor
    render() { 
        if(!this.data.stories) this.data.set('stories', {});
        if((this as any).selectedStory) (this as any).selectedStory = this.data.stories[(this as any).selectedStory.key];
        if(!(this as any).first) {
            (this as any).first = true;
            (this as any).selectedStory = SyncUtils.toArray(this.data.stories)[0];
        }
        this.editor.update(this.selectedStory);
    }

StoryList
    .style {
        border-right: 1px solid #BBB;
        position: absolute;
        left: 0; top: 0; bottom: 0;
        width: 200px;
        padding: 0 1em;
        box-sizing: border-box;
    }
    #title:h1 'Story Lines'
    #addBtn:button 'Add Story' 
        .style { width: 100%; }
        onClick() {
            let story: Story = {
                title: 'New Story',
                text: ''
            } as Story;
            this.data.setItem(story)
        }
    #storyItemList:SyncList({ item: StoryItem }) $data
        .style { width: 100%; margin-top: 1em; }
        onSelected(view: StoryItem, story: Story) { this.emit('selected', story) }

StoryItem
    .style { 
        width: 100%; 
        border: 1px solid #DDD;
        }
    #title:span $data.title
    onClick() { 
        this.emit('selected', this.data)
    }

StoryEditorControls[row]
    #title:Input({ twoway: true, label: 'Title', key: 'title' })[row-fill] $data
    #delBtn:button[row-nofill] 'Delete Story' onClick() { 
        if(confirm('Delete story?')) {
            this.data.parent.remove(this.data.key); this.hide(); 
        }
    }

StoryAndPlayer<Story>[row]
    @{ saveHandle: number; }
    .style { height: 100%; }
    #story:textarea[row-fill]
        .style {
            height: 100%;
            white-space: nowrap;
            overflow: auto;
        }
        onKeydown(e) {
            // allow tab key
            if(e.keyCode === 9) {
                let t = this.story;
                var start = t.selectionStart;
                var end = t.selectionEnd;
                var value = t.value;
                t.value = value.substring(0, start) + "  " + value.substring(end);
                t.selectionStart = t.selectionEnd = start + 2;
                e.preventDefault();
            }
        }
        onInput() {
            if(this.saveHandle) clearTimeout(this.saveHandle);
            this.saveHandle = setTimeout(this.save.bind(this), 1000);
         }
    #player:Player[row-nofill]
        .style { 
            padding-top: 1em;
            padding-left: 1em;
            width: 300px;
        }
    parse() {
        try {
            let prog = parse(this.data.text);
            this.player.play(prog);
        } catch(e) {
            console.error(e);
        }
    }
    save() {
        this.data.set('text', this.story.value); 
        this.saveHandle = 0;
    }
    render() {
        if(!this.data) {
            this.el.style.display = 'none';
        } else {
            this.el.style.display = 'flex';
            this.story.value = this.data.text;
            this.parse();
        }
    }


StoryEditor[col]
    @{ saveHandle: number; }
    .style {
        position: absolute;
        left: 200px;
        right: 0; top: 0; bottom: 0;
        padding: 1em;
    }
    #controls:StoryEditorControls[col-nofill] $data
        .style { padding-bottom: 1em; }
    #storyAndPlayer:StoryAndPlayer[col-fill] $data

Player[col]
    @{
        prog: ProgNode[];
        progress: PromptOptionNode[] = [];
        waitDisabled: boolean = false;
    }
    #btnRestart:button[col-nofill] 'Restart' onClick() { this.play(this.prog) }
    #btnWaitDisabled:button[col-nofill] '' onClick() { 
        this.waitDisabled = !this.waitDisabled;
        this.render(); }
    #output[col-fill]
        .style {
            overflow-y: scroll;
        }
    play(prog: ProgNode[]) {
        this.render();
        this.prog = prog;
        this.output.innerHTML = '';
        let firstChapter = prog[0] as ChapterNode;
        this.displayPrompt(firstChapter.prompts[0]);
    }
    displayPrompt(prompt: PromptNode, args: string = '') {
        console.log('prompt', prompt, args);
        let out = document.createElement('div');
        out.style.border = '1px solid #CCC';
        out.style.padding = '1em';
        let innerHTML = prompt.text;
        if(prompt.args && args) {
            let promptArgs = prompt.args.split(',');
            let givenArgs = args.split(',');
            for(let i = 0; i < promptArgs.length && i < givenArgs.length; i++) {
                // Remove double quotes at beginning and end:
                let val = givenArgs[i].replace(/^"(.+(?="$))"$/, '$1');;
                innerHTML = innerHTML.replace('{' + promptArgs[i] + '}', val);
            }
        }
        out.innerHTML = innerHTML;
        out.classList.add('fadeIn');
        this.output.appendChild(out);
        let delay = 500;
        if(prompt.next) {
            console.log('prompt.next', prompt.next);
            this.displayNext(prompt.next);
        } else {
            prompt.options.forEach((option) => {
                this.displayPromptOption(option, delay);
                delay += 500;
            });
        }
        //this.el.scrollTop = this.el.scrollHeight;
        out.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }
    displayPromptByName(name: string, args: string = '') {
        name = name.trim();
        let found = false;
        this.prog.forEach((chapter: ChapterNode) => {
            chapter.prompts.forEach((prompt) => {
                if(prompt.name.toLowerCase() === name) {
                    this.displayPrompt(prompt, args);
                    found = true;
                }
            });
        });
        if(!found) console.error('Could not find prompt: ', name);
    }
    displayNext(next: NextNode) {
        let name = next.next.toLowerCase();
        if(name === 'wait') {
            let args = next.args.split(',');
            if(args.length >=2) {
                let waitTime = parseInt(args[0]);
                if(waitTime === NaN) {
                    console.error('Invalid wait time');
                }
                let nextPromptName = args[1];
                if(this.waitDisabled) waitTime = 0;
                setTimeout(() => {
                    this.displayPromptByName(nextPromptName);
                }, waitTime * 1000);
            } else {
                console.error('wait(time, next) requires at least 2 arguments.')
            }
        } else if(name === 'restart') {
            this.play(this.prog);
        } else {
            this.displayPromptByName(name, next.args);
        }
    }
    displayPromptOption(option: PromptOptionNode, delay: number) {
        let out = document.createElement('div');
        out.style.marginLeft = '2em';
        out.style.padding = '.5em';
        out.style.border = '1px solid #CCC';
        out.innerHTML = option.text;
        out.addEventListener('click', () => {
            this.progress.push(option);
            console.log('progress', this.progress);
            out.style.backgroundColor = '#9D9';
            out.classList.add('fadeGreen');
            this.displayNext(option.next);
        });
        out.style.opacity = '0';
        this.output.appendChild(out);
        setTimeout(() => {
            out.style.opacity = '1';
            out.classList.add('fadeIn');
        }, delay);
        out.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }
    render() {
        this.btnWaitDisabled.innerHTML = this.waitDisabled ? 'Wait Disabled' : 'Wait Enabled';
    }


Input
    .style { 
        width: 100%;
        display: flex; 
    }
    #input:input
        .style {
            flex: 1;
            font-size: 1em;
            padding: 0.5em 0;
            background-color: transparent;
            border: none;
            border-bottom: 1px solid rgba(0,0,0,0.5);
    }
	onChange() { 
        let val = this.input.value;
        if(this.options.twoway && this.options.key) {
            this.data.set(this.options.key, val);
        }
        this.emit('change', val); 
    }
    render() {		
        if(this.data) {
            this.input.value = this.options.key ? this.data.get(this.options.key) : this.data;
        }
    }


/*
MainView
    #title:h1 'Todo List'
    #list:TodoList $data.todoItems 
    render() { if(!this.data.todoItems) this.data.set('todoItems', {}); }

TodoList
    #newItem:input
    #addBtn:button 'Add Item' 
        onClick() { 
            this.data.setItem({ text: this.newItem.value }); 
            this.newItem.value = ''; }
    #list:SyncList({ item: TodoItem }) $data

TodoItem
    #text:span $data.text .style { display: inline-block; width: 15em; }
    #delBtn:button 'X' onClick() { this.data.parent.remove(this.data.key); }
*/